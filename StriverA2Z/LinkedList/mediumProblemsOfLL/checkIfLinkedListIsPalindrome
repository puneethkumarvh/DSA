//Question link : https://www.naukri.com/code360/problems/check-if-linked-list-is-palindrome_985248?utm_source=youtube&utm_medium=affiliate&utm_campaign=Codestudio_Linkedlistseries&leftPanelTabValue=PROBLEM
//Brute force approach
//code 
//Time complexity is O(2N) as we are iterating same list twice.
//Space complexity is O(N) as we are storing all nodes in a stack.
import java.util.Stack;

public class Solution {
    public static boolean isPalindrome(Node head) {
       Stack<Node> ss= new Stack<>();
       Node temp=head;
       while(temp!=null){
           ss.push(temp);
           temp=temp.next;
       }
       temp=head;
       while(temp!=null){
           Node ssNode=ss.pop();
           if(temp.data!=ssNode.data){
               return false;
           }
           temp=temp.next;
       }
       return true;
        
    }
}


//Optimal solution - time complexity O(2N) ,space complexity - NA
//code 
public class Solution {
    public static boolean isPalindrome(Node head) {
        //find middle node using hare and tortoise method
        Node hare=head;
        Node tortoise= head;
        //O(N/2) for finding middle node
        while(hare.next!=null && hare.next.next!=null){
            hare=hare.next.next;
            tortoise=tortoise.next;
        }
        Node newHead=reverseLinkedList(tortoise.next);
        Node first=head;
        Node last=newHead;
        //traversal of this loop takes O(N/2) time complexity.
        while(last!=null){
            if(first.data!=last.data){
                reverseLinkedList(newHead); //Reverse again takes O(N/2) time
                return false;
            }
            last=last.next;
            first=first.next;
        }
        reverseLinkedList(newHead); //Reverse again takes O(N/2) time
        return true;
    }
    
    //Takes O(N/2)time to reverse a given linkedlist.
    public static Node reverseLinkedList(Node head){
        Node prev=null;
        Node temp=head;
        while(temp!=null){
            Node front = temp.next;
            temp.next=prev;
            prev=temp;
            temp=front;
        }
        return prev;
    }
}
