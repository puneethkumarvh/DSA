//Question link : https://www.naukri.com/code360/problems/reverse-linked-list_920513?utm_source=youtube&utm_medium=affiliate&utm_campaign=Codestudio_Linkedlistseries&leftPanelTabValue=SUBMISSION
//Using stack 
//Time complexity is O(2N) as we iterate the list twice. 
//Space complexity is O(N) --stack space. 
import java.util.*;
public class Solution
{
    public static Node reverseLinkedList(Node head)
    {
        Stack<Node> ss=new Stack<>();
        while(head!=null){
            ss.push(head);
            head=head.next;
        }
        if(ss.isEmpty()){
            return null;
        }
        Node temp=ss.pop();
        head=temp;
        while(!(ss.isEmpty())){
             temp.next=ss.pop();
             temp=temp.next;
        }
        temp.next=null;
        return head;

    }
}

//Optimal solution 1
//time complexity O(N)
//Space complexity - no extra space.
//code
public class Solution
{
    public static Node reverseLinkedList(Node head)
    {
        Node temp=head;
        Node prev=null;
        while(temp!=null){
            Node front = temp.next;
            temp.next=prev;
            prev=temp;
            temp=front; 
        }
        return prev;
        
    }
}


//Optimal solution 2 using recursion 
//time complexity is O(N) as we are iterating the list once.
//Space complexity is O(N) recursive stack space
//code 
public class Solution
{
    public static Node reverseLinkedList(Node head)
    {
        if(head == null || head.next==null){
            return head;
        }
        Node newHead=reverseLinkedList(head.next);
        Node front = head.next;
        front.next=head;
        head.next=null;
        return newHead;
    }
}

